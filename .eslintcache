[{"D:\\learn_react\\trello-clone\\src\\App.js":"1","D:\\learn_react\\trello-clone\\src\\index.js":"2","D:\\learn_react\\trello-clone\\src\\initial-date.js":"3","D:\\learn_react\\trello-clone\\src\\componets\\Task.jsx":"4","D:\\learn_react\\trello-clone\\src\\componets\\Column.jsx":"5","D:\\learn_react\\trello-clone\\src\\store\\reducers\\tasksReducer.js":"6","D:\\learn_react\\trello-clone\\src\\store\\store.js":"7","D:\\learn_react\\trello-clone\\src\\componets\\ListsContainer.jsx":"8","D:\\learn_react\\trello-clone\\src\\componets\\ColorPicker.jsx":"9","D:\\learn_react\\trello-clone\\src\\componets\\ColumnInput.jsx":"10"},{"size":281,"mtime":1608048362049,"results":"11","hashOfConfig":"12"},{"size":526,"mtime":1608209716438,"results":"13","hashOfConfig":"12"},{"size":723,"mtime":1608206062549,"results":"14","hashOfConfig":"12"},{"size":816,"mtime":1607439466634,"results":"15","hashOfConfig":"12"},{"size":1080,"mtime":1608287537614,"results":"16","hashOfConfig":"12"},{"size":1563,"mtime":1608287505276,"results":"17","hashOfConfig":"12"},{"size":285,"mtime":1607845926091,"results":"18","hashOfConfig":"12"},{"size":2686,"mtime":1608211331740,"results":"19","hashOfConfig":"12"},{"size":1494,"mtime":1608209684039,"results":"20","hashOfConfig":"12"},{"size":1412,"mtime":1608287514731,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"770cf4",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\learn_react\\trello-clone\\src\\App.js",[],["46","47"],"D:\\learn_react\\trello-clone\\src\\index.js",[],["48","49"],"D:\\learn_react\\trello-clone\\src\\initial-date.js",[],"D:\\learn_react\\trello-clone\\src\\componets\\Task.jsx",[],"D:\\learn_react\\trello-clone\\src\\componets\\Column.jsx",[],"D:\\learn_react\\trello-clone\\src\\store\\reducers\\tasksReducer.js",[],"D:\\learn_react\\trello-clone\\src\\store\\store.js",[],["50","51"],"D:\\learn_react\\trello-clone\\src\\componets\\ListsContainer.jsx",["52"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { connect } from 'react-redux';\r\nimport Column from './Column';\r\nimport { addNewTask, setState } from '../store/reducers/tasksReducer';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  height: 100%;\r\n`;\r\n\r\nfunction ListsContainer(props) {\r\n  const state = props.state;\r\n  // const [state, setState] = useState(props.store);\r\n\r\n  const onButtonClick = () => {\r\n    props.addNewTask('text');\r\n    props.addToLocalStorage({ ...state });\r\n  };\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const start = state.columns[source.droppableId];\r\n    const finish = state.columns[destination.droppableId];\r\n\r\n    if (start === finish) {\r\n      const newTaskIds = Array.from(start.taskIds);\r\n\r\n      newTaskIds.splice(source.index, 1);\r\n      newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n        ...start,\r\n        taskIds: newTaskIds,\r\n      };\r\n\r\n      const newState = {\r\n        ...state,\r\n        columns: {\r\n          ...state.columns,\r\n          [newColumn.id]: newColumn,\r\n        },\r\n      };\r\n      props.setState(newState);\r\n      return;\r\n    }\r\n\r\n    // move task from list to another\r\n    const startTaskIds = Array.from(start.taskIds);\r\n    startTaskIds.splice(source.index, 1);\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startTaskIds,\r\n    };\r\n\r\n    const finishTaskIds = Array.from(finish.taskIds);\r\n    finishTaskIds.splice(destination.index, 0, draggableId);\r\n    const newFinish = {\r\n      ...finish,\r\n      taskIds: finishTaskIds,\r\n    };\r\n\r\n    const newState = {\r\n      ...state,\r\n      columns: {\r\n        ...state.columns,\r\n        [newStart.id]: newStart,\r\n        [newFinish.id]: newFinish,\r\n      },\r\n    };\r\n\r\n    props.setState(newState);\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Container>\r\n        {state.columnOrder.map((columnId) => {\r\n          const column = state.columns[columnId];\r\n          const tasks = column.taskIds.map((taskId) => state.tasks[taskId]);\r\n          return <Column key={column.id} column={column} tasks={tasks} />;\r\n        })}\r\n      </Container>\r\n    </DragDropContext>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    state: state.tasksReducer,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  setState,\r\n  addNewTask,\r\n})(ListsContainer);\r\n","D:\\learn_react\\trello-clone\\src\\componets\\ColorPicker.jsx",[],"D:\\learn_react\\trello-clone\\src\\componets\\ColumnInput.jsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"53","replacedBy":"57"},{"ruleId":"55","replacedBy":"58"},{"ruleId":"53","replacedBy":"59"},{"ruleId":"55","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":17,"column":9,"nodeType":"63","messageId":"64","endLine":17,"endColumn":22},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],["65"],["66"],["65"],["66"],"no-unused-vars","'onButtonClick' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]